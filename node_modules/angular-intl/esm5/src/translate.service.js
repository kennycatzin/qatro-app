/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Subject, of as observableOf, from as observableFrom, combineLatest } from 'rxjs';
import { filter, switchMap, switchMapTo, take } from 'rxjs/operators';
import { LoaderService } from './loader.service';
import { CONFIG } from './types/config.token';
import { CONSTANTS } from './types/constants.enum';
var TranslateService = /** @class */ (function () {
    function TranslateService(http, config) {
        this.http = http;
        this.config = config;
        this.translations = {};
        this.translationsLoaded = new BehaviorSubject(false);
        this.matcher = function (key) { return new RegExp('{{\\s?[\\b' + key + '\\b]*\\s?}}', 'gm'); };
        this.loaderService = new LoaderService(http, config);
    }
    /**
     * @return {?}
     */
    TranslateService.prototype.getBrowserLanguage = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ browserLanguage = window.navigator.languages
            ? window.navigator.languages[0]
            : window.navigator.language;
        if (browserLanguage.indexOf('-') !== -1) {
            browserLanguage = browserLanguage.split('-')[0];
        }
        if (browserLanguage.indexOf('_') !== -1) {
            browserLanguage = browserLanguage.split('_')[0];
        }
        return browserLanguage;
    };
    /**
     * @param {?} fileName
     * @return {?}
     */
    TranslateService.prototype.setDefault = /**
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        var _this = this;
        this.defaultKey = fileName;
        this.defaultPrefix = fileName.split('-')[0];
        if (this.translations[this.defaultKey]) {
            this.translationsLoaded.next(true);
        }
        else {
            this.translationsLoaded.next(false);
            this.loaderService.getFile(fileName)
                .subscribe(function (translations) {
                _this.translations[_this.defaultKey] = translations;
                _this.translationsLoaded.next(true);
            });
        }
    };
    /**
     * @param {?} fileName
     * @return {?}
     */
    TranslateService.prototype.setOverride = /**
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        var _this = this;
        this.overrideKey = fileName;
        if (this.translations[this.overrideKey]) {
            this.translationsLoaded.next(true);
        }
        else {
            this.loaderService.getFile(fileName)
                .subscribe(function (translations) {
                _this.translations[_this.overrideKey] = translations;
                _this.translationsLoaded.next(true);
            });
        }
    };
    /**
     * @param {?} keyPaths
     * @return {?}
     */
    TranslateService.prototype.get = /**
     * @param {?} keyPaths
     * @return {?}
     */
    function (keyPaths) {
        return this.translationsLoaded.pipe(filter(Boolean), switchMapTo(keyPaths instanceof Array
            ? this.getAll(keyPaths)
            : this.getOne(keyPaths)));
    };
    /**
     * @param {?} keyPaths
     * @param {?} fileName
     * @return {?}
     */
    TranslateService.prototype.getByFileName = /**
     * @param {?} keyPaths
     * @param {?} fileName
     * @return {?}
     */
    function (keyPaths, fileName) {
        var _this = this;
        var /** @type {?} */ translationLoaded = new Subject();
        var /** @type {?} */ defaultFileName = this.defaultPrefix + "-" + fileName.split('-')[1];
        this.loaderService.getFile(fileName).pipe(function (file) { return combineLatest(file, _this.loaderService.getFile(defaultFileName)); }, filter(function (_a) {
            var file = _a[0], defaultFile = _a[1];
            return [file, defaultFile].indexOf(undefined) === -1;
        }), take(1)).subscribe(function (_a) {
            var translations = _a[0], defaultTranslations = _a[1];
            _this.translations[fileName] = translations;
            _this.translations[defaultFileName] = defaultTranslations;
            translationLoaded.next(fileName);
        }, function () {
            _this.loaderService.getFile(defaultFileName)
                .pipe(take(1))
                .subscribe(function (translations) {
                _this.translations[defaultFileName] = translations;
                translationLoaded.next(defaultFileName);
            });
        });
        return translationLoaded.pipe(switchMap(function (overrideFileName) {
            return keyPaths instanceof Array
                ? _this.getAll(keyPaths, overrideFileName, defaultFileName)
                : _this.getOne(keyPaths, overrideFileName, defaultFileName);
        }));
    };
    /**
     * @param {?} keyPath
     * @param {?=} fileName
     * @param {?=} defaultKey
     * @return {?}
     */
    TranslateService.prototype.getOne = /**
     * @param {?} keyPath
     * @param {?=} fileName
     * @param {?=} defaultKey
     * @return {?}
     */
    function (keyPath, fileName, defaultKey) {
        if (fileName === void 0) { fileName = this.overrideKey; }
        if (defaultKey === void 0) { defaultKey = this.defaultKey; }
        return observableFrom([this.read(keyPath, {}, fileName, defaultKey)]);
    };
    /**
     * @param {?} keyPaths
     * @param {?=} fileName
     * @param {?=} defaultKey
     * @return {?}
     */
    TranslateService.prototype.getAll = /**
     * @param {?} keyPaths
     * @param {?=} fileName
     * @param {?=} defaultKey
     * @return {?}
     */
    function (keyPaths, fileName, defaultKey) {
        var _this = this;
        if (fileName === void 0) { fileName = this.overrideKey; }
        if (defaultKey === void 0) { defaultKey = this.defaultKey; }
        return observableOf(keyPaths.reduce(function (acc, keyPath) {
            return (tslib_1.__assign({}, acc, (_a = {}, _a[keyPath] = _this.read(keyPath, {}, fileName, defaultKey), _a)));
            var _a;
        }, {}));
    };
    /**
     * @param {?} keyPath
     * @param {?=} params
     * @param {?=} overrideKey
     * @param {?=} defaultKey
     * @return {?}
     */
    TranslateService.prototype.read = /**
     * @param {?} keyPath
     * @param {?=} params
     * @param {?=} overrideKey
     * @param {?=} defaultKey
     * @return {?}
     */
    function (keyPath, params, overrideKey, defaultKey) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (overrideKey === void 0) { overrideKey = this.overrideKey; }
        if (defaultKey === void 0) { defaultKey = this.defaultKey; }
        var /** @type {?} */ value = CONSTANTS.EXIT;
        var /** @type {?} */ path = keyPath.split('.');
        if (this.translations[overrideKey]) {
            value = this.readValue(path, this.translations[overrideKey]);
            if (value === CONSTANTS.EXIT) {
                value = this.readValue(path, this.translations[defaultKey]);
            }
        }
        else if (this.translations[defaultKey]) {
            value = this.readValue(path, this.translations[defaultKey]);
        }
        if (Boolean(params) && params !== {}) {
            value = Object.keys(params)
                .reduce(function (final, key) { return final.replace(_this.matcher(key), params[key]); }, value);
        }
        if (value === CONSTANTS.EXIT) {
            console.warn('Unknown Key: ', keyPath);
            return keyPath;
        }
        return value;
    };
    /**
     * @param {?} path
     * @param {?} translation
     * @return {?}
     */
    TranslateService.prototype.readValue = /**
     * @param {?} path
     * @param {?} translation
     * @return {?}
     */
    function (path, translation) {
        var /** @type {?} */ length = path.length;
        for (var /** @type {?} */ i = 0; i < length; i++) {
            translation = translation && translation[path[i]] ? translation[path[i]] : CONSTANTS.EXIT;
            if (translation === CONSTANTS.EXIT) {
                break;
            }
        }
        return translation;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    TranslateService.prototype.isEquivalent = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (!Boolean(a) || !Boolean(b)) {
            return false;
        }
        var /** @type {?} */ aProps = Object.getOwnPropertyNames(a);
        var /** @type {?} */ bProps = Object.getOwnPropertyNames(b);
        if (aProps.length !== bProps.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < aProps.length; i++) {
            var /** @type {?} */ propName = aProps[i];
            if (a[propName] !== b[propName]) {
                return false;
            }
        }
        return true;
    };
    TranslateService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TranslateService.ctorParameters = function () { return [
        { type: HttpClient, },
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] },] },
    ]; };
    return TranslateService;
}());
export { TranslateService };
function TranslateService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TranslateService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TranslateService.ctorParameters;
    /** @type {?} */
    TranslateService.prototype.defaultKey;
    /** @type {?} */
    TranslateService.prototype.defaultPrefix;
    /** @type {?} */
    TranslateService.prototype.overrideKey;
    /** @type {?} */
    TranslateService.prototype.translations;
    /** @type {?} */
    TranslateService.prototype.loaderService;
    /** @type {?} */
    TranslateService.prototype.translationsLoaded;
    /** @type {?} */
    TranslateService.prototype.matcher;
    /** @type {?} */
    TranslateService.prototype.http;
    /** @type {?} */
    TranslateService.prototype.config;
}
//# sourceMappingURL=translate.service.js.map