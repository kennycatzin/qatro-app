{"version":3,"file":"translate.pipe.js","sourceRoot":"","sources":["../../src/translate.pipe.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAa,IAAI,EAAiB,MAAM,eAAe,CAAC;AAC/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,OAAO,EAAc,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;;IAYjD,uBAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;2BAJzB,EAAE;2BAET,IAAI,OAAO,EAAQ;QAGvC,IAAI,CAAC,kBAAkB,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAChE,MAAM,CAAC,OAAO,CAAC,EACf,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAC5B,CAAC;KACH;;;;;;IAED,iCAAS;;;;;IAAT,UAAU,GAAG,EAAE,IAAI;QAAnB,iBAMC;QALC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;YAChC,qBAAM,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACnE,KAAI,CAAC,WAAW,GAAG,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;SACrE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;KACzB;;;;IAED,mCAAW;;;IAAX;QACE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;KAC7B;;gBA5BF,IAAI,SAAC;oBACJ,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,KAAK;iBACZ;;;;gBAPQ,gBAAgB;;wBADzB;;SASa,aAAa","sourcesContent":["import { OnDestroy, Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from './translate.service';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n@Pipe({\n  name: 'translate',\n  pure: false\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n\n  public translation: string = '';\n  public translationLoaded$: Observable<boolean>;\n  private unsubscribe = new Subject<void>();\n\n  constructor(private translateService: TranslateService) {\n    this.translationLoaded$ = translateService.translationsLoaded.pipe(\n      filter(Boolean),\n      takeUntil(this.unsubscribe)\n    );\n  }\n\n  transform(val, args): string {\n    this.translationLoaded$.subscribe(() => {\n      const readValue = val ? this.translateService.read(val, args) : '';\n      this.translation = readValue === val ? this.translation : readValue;\n    });\n    return this.translation;\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n}\n"]}