{"version":3,"file":"loader.service.js","sourceRoot":"","sources":["../../src/loader.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGlD,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;;IAS5C,uBAAmB,IAAgB,EACA;QADhB,SAAI,GAAJ,IAAI,CAAY;QACA,WAAM,GAAN,MAAM;oBAJ3B,oBAAoB;yBACf,OAAO;QAIxB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;KACnD;;;;;IAEM,+BAAO;;;;cAAC,QAAgB;QAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAA;;;gBAZ9D,UAAU;;;;gBANF,UAAU;gDAaJ,MAAM,SAAC,MAAM;;wBAd5B;;SAQa,aAAa","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { CONFIG } from './types/config.token';\nimport { TranslateConfiguration } from './types/translate-configuration.interface';\n\n@Injectable()\nexport class LoaderService {\n\n  public path = '/assets/languages/';\n  public extension = '.json';\n\n  constructor(public http: HttpClient,\n              @Inject(CONFIG) public config: TranslateConfiguration) {\n    this.path = config.path ? config.path : this.path;\n  }\n\n  public getFile(fileName: string): Observable<Object> {\n    return this.http.get(this.path + fileName + this.extension)\n  }\n\n}\n"]}