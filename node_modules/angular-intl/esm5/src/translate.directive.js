/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { TranslateService } from './translate.service';
import { Subject } from 'rxjs';
import { takeUntil, take } from 'rxjs/operators';
var TranslateDirective = /** @class */ (function () {
    function TranslateDirective(element, translateService) {
        this.element = element;
        this.translateService = translateService;
        this.unsubscribe = new Subject();
        this.translationLoaded$ = this.translateService.translationsLoaded
            .pipe(takeUntil(this.unsubscribe));
    }
    Object.defineProperty(TranslateDirective.prototype, "params", {
        set: /**
         * @param {?} params
         * @return {?}
         */
        function (params) {
            if (!this.translateService.isEquivalent(this.translateParams, params)) {
                this.translateParams = params;
                if (this.translateParams) {
                    this.runOneCheck(this.keyPath, this.translateParams);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    TranslateDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.keyPath = this.element.nativeElement.textContent ? this.element.nativeElement.textContent.trim() : '';
        this.element.nativeElement.textContent = '';
        this.registerKeyChecker(this.keyPath);
    };
    /**
     * @return {?}
     */
    TranslateDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    };
    /**
     * @param {?} keyPath
     * @return {?}
     */
    TranslateDirective.prototype.registerKeyChecker = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        var _this = this;
        this.translationLoaded$
            .subscribe(function (isLoaded) { return _this.doCheck(isLoaded, keyPath, _this.translateParams); });
    };
    /**
     * @param {?} keyPath
     * @param {?} params
     * @return {?}
     */
    TranslateDirective.prototype.runOneCheck = /**
     * @param {?} keyPath
     * @param {?} params
     * @return {?}
     */
    function (keyPath, params) {
        var _this = this;
        if (keyPath) {
            this.translationLoaded$
                .pipe(take(1))
                .subscribe(function (isLoaded) { return _this.doCheck(isLoaded, keyPath, params); });
        }
    };
    /**
     * @param {?} isLoaded
     * @param {?} keyPath
     * @param {?} params
     * @return {?}
     */
    TranslateDirective.prototype.doCheck = /**
     * @param {?} isLoaded
     * @param {?} keyPath
     * @param {?} params
     * @return {?}
     */
    function (isLoaded, keyPath, params) {
        if (isLoaded) {
            var /** @type {?} */ readValue = keyPath !== '' ? this.translateService.read(keyPath, params) : '';
            this.element.nativeElement.textContent = readValue === keyPath ? '' : readValue;
        }
    };
    TranslateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[translate]'
                },] }
    ];
    /** @nocollapse */
    TranslateDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: TranslateService, },
    ]; };
    TranslateDirective.propDecorators = {
        "params": [{ type: Input, args: ['translate',] },],
    };
    return TranslateDirective;
}());
export { TranslateDirective };
function TranslateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TranslateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TranslateDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    TranslateDirective.propDecorators;
    /** @type {?} */
    TranslateDirective.prototype.keyPath;
    /** @type {?} */
    TranslateDirective.prototype.translateParams;
    /** @type {?} */
    TranslateDirective.prototype.translationLoaded$;
    /** @type {?} */
    TranslateDirective.prototype.unsubscribe;
    /** @type {?} */
    TranslateDirective.prototype.element;
    /** @type {?} */
    TranslateDirective.prototype.translateService;
}
//# sourceMappingURL=translate.directive.js.map