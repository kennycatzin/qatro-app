/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { TranslateService } from './translate.service';
import { Subject } from 'rxjs';
import { takeUntil, take } from 'rxjs/operators';
export class TranslateDirective {
    /**
     * @param {?} element
     * @param {?} translateService
     */
    constructor(element, translateService) {
        this.element = element;
        this.translateService = translateService;
        this.unsubscribe = new Subject();
        this.translationLoaded$ = this.translateService.translationsLoaded
            .pipe(takeUntil(this.unsubscribe));
    }
    /**
     * @param {?} params
     * @return {?}
     */
    set params(params) {
        if (!this.translateService.isEquivalent(this.translateParams, params)) {
            this.translateParams = params;
            if (this.translateParams) {
                this.runOneCheck(this.keyPath, this.translateParams);
            }
        }
    }
    ;
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.keyPath = this.element.nativeElement.textContent ? this.element.nativeElement.textContent.trim() : '';
        this.element.nativeElement.textContent = '';
        this.registerKeyChecker(this.keyPath);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    /**
     * @param {?} keyPath
     * @return {?}
     */
    registerKeyChecker(keyPath) {
        this.translationLoaded$
            .subscribe(isLoaded => this.doCheck(isLoaded, keyPath, this.translateParams));
    }
    /**
     * @param {?} keyPath
     * @param {?} params
     * @return {?}
     */
    runOneCheck(keyPath, params) {
        if (keyPath) {
            this.translationLoaded$
                .pipe(take(1))
                .subscribe(isLoaded => this.doCheck(isLoaded, keyPath, params));
        }
    }
    /**
     * @param {?} isLoaded
     * @param {?} keyPath
     * @param {?} params
     * @return {?}
     */
    doCheck(isLoaded, keyPath, params) {
        if (isLoaded) {
            const /** @type {?} */ readValue = keyPath !== '' ? this.translateService.read(keyPath, params) : '';
            this.element.nativeElement.textContent = readValue === keyPath ? '' : readValue;
        }
    }
}
TranslateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[translate]'
            },] }
];
/** @nocollapse */
TranslateDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: TranslateService, },
];
TranslateDirective.propDecorators = {
    "params": [{ type: Input, args: ['translate',] },],
};
function TranslateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TranslateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TranslateDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    TranslateDirective.propDecorators;
    /** @type {?} */
    TranslateDirective.prototype.keyPath;
    /** @type {?} */
    TranslateDirective.prototype.translateParams;
    /** @type {?} */
    TranslateDirective.prototype.translationLoaded$;
    /** @type {?} */
    TranslateDirective.prototype.unsubscribe;
    /** @type {?} */
    TranslateDirective.prototype.element;
    /** @type {?} */
    TranslateDirective.prototype.translateService;
}
//# sourceMappingURL=translate.directive.js.map